<? 
   //*** Sample OnePager app for MacHTTP-js -- Simple Headline News Console ***
   //*** Fetches the top Reuters news story from its RSS feed once a minute via NewsAPI.org
   // Author: cshotton
   //
   //*** This sample shows how to combine both CGI functionality and web page content into a
   //*** single file containing all the Javascript and HTML needed -- a OnePager.
   //
   // This code inside the "angle/question" brackets runs on the MacHTTP-js server before the page is served.
   // It basically acts like a little CGI script that can open URLs in the external browser
   // and also show a basic UI in a native window associated with MacHTTP-js.
   // If the url argument is in a query string, the url is opened in a native browser window.
   // Otherwise, the results of this script return nothing and the HTML is opened in the browser
   // or in the the news console window.
   //
   // Place this file somewhere in your Web site and access it from a Web browser. It will launch
   // the OnePager app and show its output in a native MacHTTP-js window.
   //
   // Note that "args" and "context" are special global variables created by MacHTTP-js and added to your script's
   // runtime context. Both are objects that have sub-fields which are documented in the MacHTTP Developer Docs.
   
   var res = "";							//results of CGI execution that will be returned below
   var port = args.req.app.get("port");		//get the port number that the server is running on from the Express.js "request" object
   
   // This section dispatches functionality based on URL query string args
   // ?url=http://some.url.here opens the URL in a new browser window
   // ?console=1 returns the HTML contents served within a MacHTTP-js or browser window
   // no search args creates a new native MacHTTP-js window and instructs it to load the URL with ?console=1 in itself
   
   //handle opening URLs in the local browser if a link was clicked in the OnePager
   var q = args.req.query.url;				//see if a parameter called "url" was passed in the query string

   if (q !== null && q !== undefined) {
   		console.log ("Opening URL " + q);	//scripts can output messages to the MacHTTP-js console display
		context.verbs.openURL (q); 			//open the URL in the external browser (context is a special global provided by MacHTTP-js)
		args.skipHTML = true;				//tell MacHTTP-js to skip sending HTML to the browser until skipHTML becomes false
   }
   else {  //see if "?console=1" is part of the URL. If so, we're supposed to be opening in a native window
		var cons = args.req.query.console;
		if (cons !== null && cons !== undefined) {
			res="";
			args.skipHTML = false; //time to turn on HTML output so the HTML below is returned
		}
		else {
			// there were no search args, so just launch the app in a native window and return a brief message
			console.log ("Launching News Console...");
			var path = args.req.baseUrl.slice (0, args.req.baseUrl.lastIndexOf ("/"));
			//open the news console in a new native window associated with MacHTTP-js
			var win = context.verbs.createWindow ("my.news", "http://localhost:" + port + path + "/newsConsole.jhtml?console=1", 
				{width:500, height:500});
			
			//return a little status info to the browser that the app is running and make sure the remaining HTML skipped
			res="<html><body><h2>Starting your news service... </h2>Check MacHTTP-js for the news console window.<p />You can close this window now.</body></html>";
			args.skipHTML = true;

		}
   }
   res; //return appropriate results generated by the CGI code (or "" if nothing is to be returned).
?>
<html>
<head>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>News Console</title>
	<script>
		try {
			//this code sets up a reasonable facsimile of a browser runtime in MacHTTP-js windows
			window.nodeRequire = require;
			delete window.require;
			delete window.exports;
			delete window.module;
		}
		catch (e) {
			console.log ("skipping electron inits");
		}
	</script>
	
	<!-- MacHTTP-js includes bootstrap, jquery, fontawesome, and a few other goodies in the /_static/lib
	     branch of its internal document tree. They can be used in your OnePagers or you can pull in
	     resources from an external server or CDN as appropriate.
	-->
	<script src="/_static/lib/jquery/dist/jquery.js"></script>
	<link rel="stylesheet" href="/_static/lib/fontawesome/css/font-awesome.min.css">
	<script src="/_static/lib/jquery/dist/jquery.js"></script>
	<script src="/_static/lib/jqueryrotate/jQueryRotate.js"></script>
	
	<!-- Use the app-wide theme from MacHTTP-js by getting the theme setting out of the ODB -->
	<!-- Note the code inside of "angle/question" brackets that is run on the server side to insert the style sheet name. --> 
	<link rel="stylesheet" href="<%
									var css="";
										var theme = context.odb.getAttribute ("system/settings/globalTheme");
										css = context.odb.getAttribute ("system/themes/" + theme);
									args.skipHTML ? "" : css;
								%>">
	<script src="/_static/lib/bootstrap/dist/js/bootstrap.min.js"></script>

</head>
<body>
	<div class="container-fluid filled">
		<div class="row">
			<div class="col-md-2 col-xs-2">
				Title
			</div>
			<div class="col-md-10 col-xs-9" id="title">
			</div>
			<div class="col-xs-1">
				<span id="spinner" class="glyphicon glyphicon-refresh" aria-hidden="true" onclick="NewsLoop();"></span>
			</div>
		</div>
		<p />
		<div class="row">
			<div class="col-md-2 col-xs-2">
				Article
			</div>
			<div class="col-md-10 col-xs-10" id="article">
			</div>
		</div>
		<div class="row">
			<div class="col-md-2 col-xs-2">
				Image
			</div>
			<div class="col-md-10 col-xs-10" id="image">
			</div>
		</div>
	</div>
	<hr />
	<p />
	<a onclick="OpenPage('https://newsapi.org')">News sources powered by NewsAPI.org</a>
	
	<script>
	
		function msg (m) {
			console.log (m);
		}
	
		function IgnoreResults (data) {};
	
		function HandleResults (data) {
			msg (JSON.stringify (data, null, 4));
			$("#title").html('<a onclick="OpenPage(\'' + data.articles[0].url + '\')">' +
					data.articles[0].title + '</a>');
			$("#article").html(data.articles[0].description);
			$("#image").html ('<img src="' + data.articles[0].urlToImage + '" width="250">');
		}
	
		function OpenPage (url) {
			FetchNews ("newsConsole.jhtml?url=" + url, IgnoreResults);
			return false;
		}
	
		var service = "https://newsapi.org/v1/articles?source=reuters&sortBy=latest&apiKey=769af25d185c43f4b86de4e2b40540e9";
	
		function FetchNews (svc, results) {
			msg ("fetching...");
			try {
				$.ajax ({
						 type: "GET",
						 url: svc,
						 dataType:'json',
						 data: null,
						 success: function (data) {
							results (data);	
							}
				});
			} catch (err) {
				msg ("FetchNews err: " + err);
			}

		}
	
		var idleTime = 2000; //wake up every 2 seconds
		var idleMultiplier = 30; //do something every minute
		var idleCount = 0;
		var rotAngle = 0;
		
		function NewsLoop () {
			if (idleCount++ >= idleMultiplier) {
				idleCount = 0;
				FetchNews(service, HandleResults);
			}
			// do the animations
			rotAngle = (rotAngle+30) % 360;
			$("#spinner").rotate (rotAngle);
			
			return false;
		}
	
		$(document).ready (function () {
			setInterval (NewsLoop, idleTime);
			FetchNews(service, HandleResults);
		});
	
	
	</script>

</body>
</html>