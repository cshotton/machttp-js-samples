<?
	// NOTE! This code all runs on the server side, inside MacHTTP-js. See far below for Arduino code!
	
	var serviceName = "arduino2.jhtml";		//the name of this file
	var res = "";							//results of CGI execution that will be returned below
	var port = args.req.app.get("port");		//get the port number that the server is running on from the Express.js "request" object
   
	var q = args.req.query.url;				//see if a parameter called "url" was passed in the query string

   if (q !== null && q !== undefined) {
   		console.log ("Opening URL " + q);	//scripts can output messages to the MacHTTP-js console display
		context.verbs.openURL (q); 			//open the URL in the external browser (context is a special global provided by MacHTTP-js)
		args.skipHTML = true;				//tell MacHTTP-js to skip sending HTML to the browser until skipHTML becomes false
   }
   else {  //see if "?console=1" is part of the URL. If so, we're supposed to be opening in a native window
		var cons = args.req.query.console;
		if (cons !== null && cons !== undefined) {
			res="";
			args.skipHTML = false; //time to turn on HTML output so the HTML below is returned
		}
		else { //see if ?cmd=X&arg=YYY is part of the URL query string
			var cmd = args.req.query.cmd;
			if (cmd !== null && cmd !== undefined) {
				arg = args.req.query.arg;
				if (arg === null || arg === undefined)
					arg = "";
				
				var sp = context.odb.getAttribute ("tmp/serial_port"); //get our previously saved serial port info from the ODB
				
				switch (cmd) {
					case "O": //open port
						sp = context.verbs.serialOpen (arg,{baudRate: 57600});
						context.odb.setAttribute ("tmp/serial_port", "text", sp);
						break;
						
					case "C": //close port
						context.verbs.serialClose (sp);
						break;
						
					case "L" : //set LED
						context.verbs.serialWrite (sp, arg + "\n");
						break;
				}
			}
			else {
				// there were no search args, so just launch the app in a native window and return a brief message
				console.log ("Launching Arduino Console...");
				var path = args.req.baseUrl.slice (0, args.req.baseUrl.lastIndexOf ("/"));
				//open the news console in a new native window associated with MacHTTP-js
				var win = context.verbs.createWindow ("my.arduino", "http://localhost:" + port + path + "/" + serviceName + "?console=1", 
					{width:500, height:540});
			
				//return a little status info to the browser that the app is running and make sure the remaining HTML skipped
				res="<html><body><h2>Starting your Arduino API service...</h2>You can close this window now.</body></html>";
				args.skipHTML = true;
			}
		}
   }
   res; //return appropriate results generated by the CGI code (or "" if nothing is to be returned).
?>

<html>
<head>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Arduino Example</title>
	<script>
		try {
			//this code sets up a reasonable facsimile of a browser runtime in MacHTTP-js windows
			window.nodeRequire = require;
			delete window.require;
			delete window.exports;
			delete window.module;
		}
		catch (e) {
			console.log ("skipping electron inits");
		}
	</script>
	
	<!-- MacHTTP-js includes bootstrap, jquery, fontawesome, and a few other goodies in the /_static/lib
	     branch of its internal document tree. They can be used in your OnePagers or you can pull in
	     resources from an external server or CDN as appropriate.
	-->
	<script src="/_static/lib/jquery/dist/jquery.js"></script>
	<link rel="stylesheet" href="/_static/lib/fontawesome/css/font-awesome.min.css">
	<script src="/_static/lib/jquery/dist/jquery.js"></script>
	<script src="/_static/lib/jqueryrotate/jQueryRotate.js"></script>
	
	<!-- Use the app-wide theme from MacHTTP-js by getting the theme setting out of the ODB -->
	<!-- Note the code inside of "angle/question" brackets that is run on the server side to insert the style sheet name. --> 
	<link rel="stylesheet" href="<%
									var css="";
										var theme = context.odb.getAttribute ("system/settings/globalTheme");
										css = context.odb.getAttribute ("system/themes/" + theme);
									if (!args.skipHTML) 
										css;
									else
										"";
								%>">
	<script src="/_static/lib/bootstrap/dist/js/bootstrap.min.js"></script>
	<script src="/_static/lib/bootbox/bootbox.js"></script>
	
	<style>
		#swatch {
			width: 100px;
			height: 100px;
			background-color: rgb(0,0,0);
			border : solid 1px;
		}
	</style>
</head>
<body>
	<div class="container-fluid filled">
		<h2>Arduino Example</h2>
		<div class="row">
			<div class="col-sm-6 col-xs-6">
				<form action="" method="get">
					<div class="form-group">
						<label for="usbDevice" class="col-sm-2 control-label">USB Device
							<span class="glyphicon glyphicon-question-sign" aria-hidden="true" onclick="DoHelp('usbDevice')"></span>
						</label>
						<div class="col-sm-10">
							<input type="text" class="form-control" id="usbDevice" size="40" placeholder="/dev/cu.somedevice">
							<a href="#" class="btn btn-primary" onclick="openSerialPort()">Connect</a>
							<a href="#" class="btn btn-primary" onclick="closeSerialPort()">Disconnect</a>
						</div>
					</div>
				</form>	
			</div>
			<div class="col-sm-6 col-xs-6">
				<div id="swatch">
				</div>
				<div>
					<a href="#" class="btn btn-primary" onclick="ToggleLED()">Toggle LED</a>
				</div>
			</div>	
		</div>
		<div class="row">
			<div class="col-xs-12">
			<hr>
			<p>This example requires an Arduino microcontroller connected to the computer running MacHTTP-js via
			a USB or serial connection. The comments at the bottom of this example's source file contain a simple Arduino sketch
			that listens to the serial port for commands and then toggles the on-board LED based on what it hears from
			MacHTTP-js. You will need to install and run this sketch on your Arduino first.</p>
			<p>You need to enter the USB device in the specified field and click Connect. Then pressing the Toggle LED button
			should result in a corresponding change on the Arduino's on-board (pin 13) LED. This is not the most robust of examples,
			so running it twice without stopping and starting MacHTTP-js may leave the serial port in an "in use" state. Make sure
			you click the Disconnect button before closing the example if you want to try it again later.</p>
			</div>
		</div>
	</div>	
	<script>
		// NOTE! This is Javascript code that is running in the browser (or the MacHTTP-js native window)
		
		var portOpen = false;
		var usbDevice = "";
		var ajaxServiceName = "arduino2.jhtml";
		var ledColor = "0";
		
		var helpText = {
			'usbDevice' : 'The device name of the USB port your Arduino is plugged into (e.g. /dev/cu.usbdevice)',
			'ENDOFLIST' : ''
			};
	//--------------------------------------------------
	
		function DoHelp (which) {
			try {
				var bb = bootbox.alert (helpText [which]);
				bb.find(".btn-primary").removeClass("btn-primary")
			}
			catch (err) {
			}
			return false;
		}
			
	//--------------------------------------------------
	
		function Service (cmd, arg) {
			try {
				$.ajax ({
						 type: "GET",
						 url: ajaxServiceName + "?cmd=" + cmd + "&arg=" + arg,
						 dataType:'json',
						 data: null,
						 success: function (data) {
							//results (data);
								console.log ("results: " + data);
							}
				});
			} catch (err) {
				console.log ("Service err: " + err);
			}

		}
	
	//--------------------------------------------------
	
		function openSerialPort() {
			usbDevice = $("#usbDevice").val();
			console.log ("Opening serial port " + usbDevice);
			Service ("O", usbDevice); //"/dev/cu.usbmodemFD4331");
			portOpen = true; //let's just assume it worked...
		}
		
	//--------------------------------------------------
	
		function closeSerialPort() {
			console.log ("Closing serial port...");
			Service ("C", "");
			portOpen = false; //let's just assume it worked...
		}
		
	//--------------------------------------------------
	
		function setLEDColor (hex) {
			if (!portOpen) return;			
			Service ("L", hex);
		}
	
	//--------------------------------------------------
		
		function ToggleLED () {
			var c = "FFFFFF";
			
			if (ledColor === "0") {
				ledColor = "1";
			}
			else {
				ledColor = "0";
				c = "000000";
			}
				
			$('#swatch').css('background-color', c);
			setLEDColor (ledColor);
		}
	
	//--------------------------------------------------
	
		$(document).ready (function () {
			ledColor = "0";
			portOpen = false;
		});
	
	</script>
</body>
</html>

<!--
// Arduino sketch: copy everything from this line....
// (assumes this sketch is running on an Arduino with pin 13 driving a LED (the on-board LED on an Uno))
//
#define BSIZE 24
char line [BSIZE+1];

void setup() {
  // put your setup code here, to run once:
  // initialize digital pin 13 as an output.
  pinMode(13, OUTPUT);
  Serial.begin (57600);
  Serial.setTimeout (100);
}

void loop() {
  // put your main code here, to run repeatedly:

  byte size =  Serial.readBytes (line, 2);
  line [size] = '\0';

  if (size>0) {

    char cmd = ' ';
    
    sscanf (line, "%c", &cmd);
    line [0]='-';
    line [1] = '\0';
    
    switch (cmd) {
      case '0':
          digitalWrite(13, LOW);   // turn the LED off (LOW is the voltage level)
          sprintf (line, "off %c\n", cmd);
          break;
      case '1':
          digitalWrite(13, HIGH);   // turn the LED on (HIGH is the voltage level)
          sprintf (line, "on %c\n", cmd);
          break;
    }

    Serial.print(line);
  }  

}
// ...to this line, paste it into a new Arduino sketch, and run it.
-->