<?
   var res = "";							//results of CGI execution that will be returned below
   var port = args.req.app.get("port");		//get the port number that the server is running on from the Express.js "request" object
   
   var q = args.req.query.url;				//see if a parameter called "url" was passed in the query string

   if (q !== null && q !== undefined) {
   		console.log ("Opening URL " + q);	//scripts can output messages to the MacHTTP-js console display
		context.verbs.openURL (q); 			//open the URL in the external browser (context is a special global provided by MacHTTP-js)
		args.skipHTML = true;				//tell MacHTTP-js to skip sending HTML to the browser until skipHTML becomes false
   }
   else {  //see if "?console=1" is part of the URL. If so, we're supposed to be opening in a native window
		var cons = args.req.query.console;
		if (cons !== null && cons !== undefined) {
			res="";
			args.skipHTML = false; //time to turn on HTML output so the HTML below is returned
		}
		else {
			var cmd = args.req.query.cmd;
			if (cmd !== null && cmd !== undefined) {
				arg = args.req.query.arg;
				if (arg === null || arg === undefined)
					arg = "";
				
				var sp = context.odb.getAttribute ("tmp/serial_port");
				
				switch (cmd) {
					case "O": //open port
						sp = context.verbs.serialOpen (arg,{baudRate: 57600});
						context.odb.setAttribute ("tmp/serial_port", "text", sp);
						break;
						
					case "C": //close port
						context.verbs.serialClose (sp);
						break;
						
					case "L" : //set LED
						context.verbs.serialWrite (sp, "L" + arg + "\n");
						break;
				}
			}
			else {
				// there were no search args, so just launch the app in a native window and return a brief message
				console.log ("Launching Arduino Console...");
				var path = args.req.baseUrl.slice (0, args.req.baseUrl.lastIndexOf ("/"));
				//open the news console in a new native window associated with MacHTTP-js
				var win = context.verbs.createWindow ("my.arduino", "http://localhost:" + port + path + "/arduino.jhtml?console=1", 
					{width:500, height:500});
			
				//return a little status info to the browser that the app is running and make sure the remaining HTML skipped
				res="<html><body><h2>Starting your Arduino API service...</h2>You can close this window now.</body></html> <!-- ";
				args.skipHTML = true;
			}
		}
   }
   res; //return appropriate results generated by the CGI code (or "" if nothing is to be returned).
?>
<html>
<head>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>LightBlue Bean+ Sample</title>
	<script>
		try {
			//this code sets up a reasonable facsimile of a browser runtime in MacHTTP-js windows
			window.nodeRequire = require;
			delete window.require;
			delete window.exports;
			delete window.module;
		}
		catch (e) {
			console.log ("skipping electron inits");
		}
	</script>
	
	<!-- MacHTTP-js includes bootstrap, jquery, fontawesome, and a few other goodies in the /_static/lib
	     branch of its internal document tree. They can be used in your OnePagers or you can pull in
	     resources from an external server or CDN as appropriate.
	-->
	<script src="/_static/lib/jquery/dist/jquery.js"></script>
	<link rel="stylesheet" href="/_static/lib/fontawesome/css/font-awesome.min.css">
	<script src="/_static/lib/jquery/dist/jquery.js"></script>
	<script src="/_static/lib/jqueryrotate/jQueryRotate.js"></script>
	
	<!-- Use the app-wide theme from MacHTTP-js by getting the theme setting out of the ODB -->
	<!-- Note the code inside of "angle/question" brackets that is run on the server side to insert the style sheet name. --> 
	<link rel="stylesheet" href="<%
									var css="";
										var theme = context.odb.getAttribute ("system/settings/globalTheme");
										css = context.odb.getAttribute ("system/themes/" + theme);
									css;
								%>">
	<script src="/_static/lib/bootstrap/dist/js/bootstrap.min.js"></script>
	<style>
		#slideR {
			-webkit-appearance: none;
			padding-left:2px; padding-right:2px;
			-webkit-border-radius: 5px;
			background-image: -webkit-linear-gradient(top, #ff0000, #ff3333, #990000);
		}
		#slideG {
			-webkit-appearance: none;
			padding-left:2px; padding-right:2px;
			-webkit-border-radius: 5px;
			background-image: -webkit-linear-gradient(top, #00ff00, #33ff33, #009900);
		}
		#slideB {
			-webkit-appearance: none;
			padding-left:2px; padding-right:2px;
			-webkit-border-radius: 5px;
			background-image: -webkit-linear-gradient(top, #0000ff, #3333ff, #000099);
		}
		#swatch {
			width: 100px;
			height: 100px;
			background-color: rgb(0,0,0);
			border : solid 1px;
		}
	</style>
</head>
<body>
	<h1>LightBlue Bean+</h1>
	<div class="container-fluid filled">
		<div class="row">
			<div class="col-sm-6 col-xs-6">
				<form action="" method="get">
					<input id="slideR" type="range" min="0" max="255" value="255" onchange="updateSlider()" step="1"><br>
					<input id="slideG" type="range" min="0" max="255" value="0" onchange="updateSlider()" step="1"><br>
					<input id="slideB" type="range" min="0" max="255" value="0" onchange="updateSlider()" step="1">
				</form>	
			</div>
			<div class="col-sm-6 col-xs-6">
				<div id="swatch">
				</div>
				<div id="colorInfo">
					Hex Code Here
				</div>
			</div>	
		</div>
	</div>	
	<script>
	
		function Service (cmd, arg) {
			try {
				$.ajax ({
						 type: "GET",
						 url: "arduino.jhtml?cmd=" + cmd + "&arg=" + arg,
						 dataType:'json',
						 data: null,
						 success: function (data) {
							//results (data);
								console.log ("results: " + data);
							}
				});
			} catch (err) {
				console.log ("Service err: " + err);
			}

		}
	
		function openSerialPort() {
			Service ("O", "/dev/cu.LightBlue-Bean");
		}
		
		function setBeanColor (hex) {
			Service ("L", hex);
		}
	
		function decimalToHex(d, padding) {
			var hex = Number(d).toString(16);
			padding = typeof (padding) === "undefined" || padding === null ? padding = 2 : padding;

			while (hex.length < padding) {
				hex = "0" + hex;
			}
			return hex.toUpperCase();
		}

		function updateSlider() {
			r=$('#slideR').val();
			g=$('#slideG').val();
			b=$('#slideB').val();
			$('#swatch').css('background-color', 'rgb('+r+', '+g+', '+b+')');
		
			var hex = decimalToHex (r, 2) + decimalToHex (g, 2) + decimalToHex (b, 2);
			$('#colorInfo').html(hex);
			
			setBeanColor (hex);
		}
	
		$(document).ready (function () {
			openSerialPort();
			updateSlider ();
			portOpen = true;
		});
	
	</script>
</body>
</html>

<!--
// assumes this sketch is running on the LightBlue Bean+
//
#define BSIZE 24
char line [BSIZE+1];

void setup() {
  // put your setup code here, to run once:
  Bean.setLed (0,0,0);
  Serial.begin (57600);
  Serial.setTimeout (100);
}

void loop() {
  // put your main code here, to run repeatedly:

  byte size =  Serial.readBytes (line, 8);
  line [size] = '\0';

  if (size>0) {

    int red=0, green=0, blue=0;
    char cmd = ' ';
    
    sscanf (line, "%c%02x%02x%02x", &cmd, &red, &green, &blue);
    line [0]='-';
    line [1] = '\0';
    
    switch (cmd) {
      case 'L':
          Bean.setLed (red,green,blue);
          sprintf (line, "+%c%02X%02X%02X\n", cmd, red, green, blue);
          break;
    }

    Serial.print(line);
  }  
//  Bean.sleep (20);

}

-->